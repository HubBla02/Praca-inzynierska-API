// <auto-generated />
using System;
using CarrentlyTheBestAPI.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarrentlyTheBestAPI.Migrations
{
    [DbContext(typeof(WypozyczenieDbContext))]
    [Migration("20240817150816_UserDoRenta2")]
    partial class UserDoRenta2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarrentlyTheBestAPI.Entities.Pojazd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("CenaD")
                        .HasColumnType("real");

                    b.Property<float>("CenaK")
                        .HasColumnType("real");

                    b.Property<bool>("Dostepny")
                        .HasColumnType("boolean");

                    b.Property<string>("Marka")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RodzajPaliwa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RodzajSkrzyni")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RokProdukcji")
                        .HasColumnType("integer");

                    b.Property<string>("Typ")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Pojazdy");
                });

            modelBuilder.Entity("CarrentlyTheBestAPI.Entities.Rola", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("CarrentlyTheBestAPI.Entities.Uzytkownik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("CzyTrzezwy")
                        .HasColumnType("boolean");

                    b.Property<bool>("CzyZablokowany")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataUrodzenia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HasloHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Imie")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nazwisko")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RolaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RolaId");

                    b.ToTable("Uzytkownicy");
                });

            modelBuilder.Entity("CarrentlyTheBestAPI.Entities.Wypozyczenie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Cena")
                        .HasColumnType("real");

                    b.Property<DateTime>("DataRozpoczecia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataZakonczenia")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PojazdId")
                        .HasColumnType("integer");

                    b.Property<string>("UzytkownikEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PojazdId");

                    b.ToTable("Wypozyczenia");
                });

            modelBuilder.Entity("CarrentlyTheBestAPI.Entities.Uzytkownik", b =>
                {
                    b.HasOne("CarrentlyTheBestAPI.Entities.Rola", "Rola")
                        .WithMany()
                        .HasForeignKey("RolaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rola");
                });

            modelBuilder.Entity("CarrentlyTheBestAPI.Entities.Wypozyczenie", b =>
                {
                    b.HasOne("CarrentlyTheBestAPI.Entities.Pojazd", "Pojazd")
                        .WithMany()
                        .HasForeignKey("PojazdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pojazd");
                });
#pragma warning restore 612, 618
        }
    }
}
